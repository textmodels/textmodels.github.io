"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7039],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>p});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},h=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),d=c(a),p=n,m=d["".concat(l,".").concat(p)]||d[p]||u[p]||o;return a?r.createElement(m,s(s({ref:t},h),{},{components:a})):r.createElement(m,s({ref:t},h))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2167:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:3},s="Feature branch workflow",i={unversionedId:"tutorial-extras/git-workflow",id:"tutorial-extras/git-workflow",title:"Feature branch workflow",description:'Text Models supports a so-called "Feature Branch Workflow", which is a version control strategy where changes takes place in dedicated branches rather than the main branch. This allows team members to make separate changes simultaneously without disrupting the main documentation and ensures that the main branch always contains accepted (approved) documentation. Feature branches should be given descriptive names and can be pushed to a central repository to be shared with others and backed up. The main branch is the only "special" branch and it is not affected by the creation or deletion of feature branches. This is a huge advantage as it encourages incremental and controlled changes because the changes can be added individually as they are ready.',source:"@site/docs/tutorial-extras/git-workflow.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/git-workflow",permalink:"/docs/tutorial-extras/git-workflow",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Configure repository settings",permalink:"/docs/tutorial-extras/setting-repository-settings"},next:{title:"API",permalink:"/docs/api"}},l={},c=[{value:"Create a new branch",id:"create-a-new-branch",level:2},{value:"Update, commit and push changes",id:"update-commit-and-push-changes",level:2},{value:"Push feature branch to remote",id:"push-feature-branch-to-remote",level:2},{value:"Resolve feedback",id:"resolve-feedback",level:2},{value:"Merge to main branch",id:"merge-to-main-branch",level:2}],h={toc:c};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"feature-branch-workflow"},"Feature branch workflow"),(0,n.kt)("p",null,'Text Models supports a so-called "Feature Branch Workflow", which is a version control strategy where changes takes place in dedicated branches rather than the main branch. This allows team members to make separate changes simultaneously without disrupting the main documentation and ensures that the main branch always contains accepted (approved) documentation. Feature branches should be given descriptive names and can be pushed to a central repository to be shared with others and backed up. The main branch is the only "special" branch and it is not affected by the creation or deletion of feature branches. This is a huge advantage as it encourages incremental and controlled changes because the changes can be added individually as they are ready. '),(0,n.kt)("p",null,"The Feature Branch Workflow assumes a central repository, and the main branch represents the official project history. Instead of committing directly on their local main branch, team members create a new branch every time they start work on an update of the documentation. Feature branches should have descriptive names. The idea is to give a clear, highly-focused purpose to each branch."),(0,n.kt)("p",null,"In addition, feature branches should be pushed to the central repository. This makes it possible to share an update with other team members without touching the official documentation in the main branch. Since main is the only \u201cspecial\u201d branch, storing several feature branches on the central repository doesn\u2019t pose any problems. Of course, this is also a convenient way to back up everybody\u2019s local work. The following is a walk-through of a Feature Branch Workflow."),(0,n.kt)("h1",{id:"example"},"Example"),(0,n.kt)("p",null,"The following is an example of the type of scenario in which a feature branching workflow is used. The scenario is that of a team doing code review around on a new feature pull request. This is one example of the many purposes this model can be used for."),(0,n.kt)("h2",{id:"create-a-new-branch"},"Create a new branch"),(0,n.kt)("p",null,"Before she starts developing a feature, Mary needs an isolated branch to work on. She can request a new branch with the following command:\nThis checks out a branch called marys-feature based on main, and the -b flag tells Git to create the branch if it doesn\u2019t already exist. On this branch, Mary edits, stages, and commits changes in the usual fashion, building up her feature with as many commits as necessary:"),(0,n.kt)("h2",{id:"update-commit-and-push-changes"},"Update, commit and push changes"),(0,n.kt)("p",null,"Mary adds a few commits to her feature over the course of the morning. Before she leaves for lunch, it\u2019s a good idea to push her feature branch up to the central repository. This serves as a convenient backup, but if Mary was collaborating with other developers, this would also give them access to her initial commits."),(0,n.kt)("p",null,"This command pushes marys-feature to the central repository (origin), and the -u flag adds it as a remote tracking branch. After setting up the tracking branch, Mary can call git push without any parameters to push her feature."),(0,n.kt)("h2",{id:"push-feature-branch-to-remote"},"Push feature branch to remote"),(0,n.kt)("p",null,"When Mary gets back from lunch, she completes her feature. Before merging it into main, she needs to file a pull request letting the rest of the team know she's done. But first, she should make sure the central repository has her most recent commits:"),(0,n.kt)("p",null,"Then, she files the pull request in her Git GUI asking to merge marys-feature into main, and team members will be notified automatically. The great thing about pull requests is that they show comments right next to their related commits, so it's easy to ask questions about specific changesets."),(0,n.kt)("h2",{id:"resolve-feedback"},"Resolve feedback"),(0,n.kt)("p",null,"Bill gets the pull request and takes a look at marys-feature. He decides he wants to make a few changes before integrating it into the official project, and he and Mary have some back-and-forth via the pull request."),(0,n.kt)("p",null,"To make the changes, Mary uses the exact same process as she did to create the first iteration of her feature. She edits, stages, commits, and pushes updates to the central repository. All her activity shows up in the pull request, and Bill can still make comments along the way."),(0,n.kt)("p",null,"If he wanted, Bill could pull marys-feature into his local repository and work on it on his own. Any commits he added would also show up in the pull request."),(0,n.kt)("h2",{id:"merge-to-main-branch"},"Merge to main branch"),(0,n.kt)("p",null,"Once Bill is ready to accept the pull request, someone needs to merge the feature into the stable project (this can be done by either Bill or Mary):"),(0,n.kt)("p",null,"This process often results in a merge commit. Some developers like this because it\u2019s like a symbolic joining of the feature with the rest of the code base. But, if you\u2019re partial to a linear history, it\u2019s possible to rebase the feature onto the tip of main before executing the merge, resulting in a fast-forward merge."),(0,n.kt)("p",null,"Some GUI\u2019s will automate the pull request acceptance process by running all of these commands just by clicking an \u201cAccept\u201d button. If yours doesn\u2019t, it should at least be able to automatically close the pull request when the feature branch gets merged into main."),(0,n.kt)("p",null,"Meanwhile, John is doing the exact same thing"),(0,n.kt)("p",null,"While Mary and Bill are working on marys-feature and discussing it in her pull request, John is doing the exact same thing with his own feature branch. By isolating features into separate branches, everybody can work independently, yet it\u2019s still trivial to share changes with other developers when necessary."))}u.isMDXComponent=!0}}]);