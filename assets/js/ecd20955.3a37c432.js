"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4973],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var h=r.createContext({}),c=function(e){var t=r.useContext(h),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},l=function(e){var t=c(e.components);return r.createElement(h.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,h=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(a),d=n,u=p["".concat(h,".").concat(d)]||p[d]||m[d]||o;return a?r.createElement(u,s(s({ref:t},l),{},{components:a})):r.createElement(u,s({ref:t},l))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var h in t)hasOwnProperty.call(t,h)&&(i[h]=t[h]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},6943:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:3},s="Feature branch workflow",i={unversionedId:"tutorial-versioning/git-workflow",id:"tutorial-versioning/git-workflow",title:"Feature branch workflow",description:'Text Models supports a so-called "Feature Branch Workflow", which is a version control strategy where changes takes place in dedicated branches rather than the master branch. This allows team members to make separate changes simultaneously without disrupting the master documentation and ensures that the master branch always contains accepted (or approved) documentation. Feature branches should be given descriptive names and can be pushed to a central repository to be shared with others and backed up. The master branch is the only "special" branch and it is not affected by the creation or deletion of feature branches. This is a huge advantage as it encourages incremental and controlled changes because the changes can be merged with the master branch individually as they are ready.',source:"@site/docs/tutorial-versioning/git-workflow.md",sourceDirName:"tutorial-versioning",slug:"/tutorial-versioning/git-workflow",permalink:"/docs/tutorial-versioning/git-workflow",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Configure repository settings",permalink:"/docs/tutorial-versioning/setting-repository-settings"}},h={},c=[{value:"Example",id:"example",level:2},{value:"Create a new branch",id:"create-a-new-branch",level:3},{value:"Update, commit and push changes",id:"update-commit-and-push-changes",level:3},{value:"Resolve feedback",id:"resolve-feedback",level:3},{value:"Merge to master branch",id:"merge-to-master-branch",level:3}],l={toc:c};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"feature-branch-workflow"},"Feature branch workflow"),(0,n.kt)("p",null,'Text Models supports a so-called "Feature Branch Workflow", which is a version control strategy where changes takes place in dedicated branches rather than the master branch. This allows team members to make separate changes simultaneously without disrupting the master documentation and ensures that the master branch always contains accepted (or approved) documentation. Feature branches should be given descriptive names and can be pushed to a central repository to be shared with others and backed up. The master branch is the only "special" branch and it is not affected by the creation or deletion of feature branches. This is a huge advantage as it encourages incremental and controlled changes because the changes can be merged with the master branch individually as they are ready. '),(0,n.kt)("p",null,"The Feature Branch Workflow assumes a central repository, and the master branch represents the official project history. Committing directly on the local master branch is not supported by Text Models. When team members start work on an update of the documentation a new branch should be created. It is good practice to keep each branch short lived and self-contained in scope to make a merge with the master branch easier at a later stage. The idea is to give a clear, highly-focused purpose to each branch."),(0,n.kt)("p",null,"In addition, feature branches should be pushed to the central repository. This makes it possible to share an update with other team members without touching the \u201cofficial\u201d documentation in the master branch. Since master is the \u201cofficial\u201d branch internally in the team, storing several feature branches on the central repository doesn\u2019t pose any problems. Of course, this is also a convenient way to back up everybody\u2019s local work. The following is a walk-through of a Feature Branch Workflow."),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("p",null,"The following is an example of the type of scenario in which a feature branching workflow is used. The scenario is that of a team updating a Technical File with documentation for a new system feature. This is one example of the many purposes this workflow can be used for."),(0,n.kt)("h3",{id:"create-a-new-branch"},"Create a new branch"),(0,n.kt)("p",null,"Before she starts updating the Technical File, Alice needs an isolated branch to work on. In the menu she selects ",(0,n.kt)("strong",{parentName:"p"},"View > Branches"),". She selects the button ",(0,n.kt)("strong",{parentName:"p"},"New Branch From 'master'")," in the ",(0,n.kt)("strong",{parentName:"p"},"Branches")," pane and creates a new branch ",(0,n.kt)("inlineCode",{parentName:"p"},"new-feature_pressure-safety-valve")," from the ",(0,n.kt)("strong",{parentName:"p"},"New Branch")," dialog. "),(0,n.kt)("img",{src:"/img/new-branch-button.png",width:"450",alt:"New Branch",style:{margin:"30px 0"}}),(0,n.kt)("p",null,"This checks out a branch based on master. On this branch, Alice edits, stages, and commits changes, building up her documentation changes with as many commits as necessary:"),(0,n.kt)("img",{src:"/img/pressure-safety-valve-branch-created.png",width:"450",alt:"New Branch",style:{margin:"30px 0"}}),(0,n.kt)("h3",{id:"update-commit-and-push-changes"},"Update, commit and push changes"),(0,n.kt)("p",null,"Alice adds a few commits to her branch during the day. Each commit is automatically pushed to the remote repository (if available). The remote repository serves as a convenient backup. If Alice collaborates with other team members, this also gives them access to her initial commits."),(0,n.kt)("img",{src:"/img/committing-new-feature-change.png",width:"450",alt:"Commit",style:{margin:"30px 0"}}),(0,n.kt)("p",null,"When Alice has completed her changes, she needs to let the rest of the team know she's done. First, she makes sure that her changes has been commited. Then, she emails the team asking them to pull changes from the remote repository. Bob gets the email with the pull request and selects the ",(0,n.kt)("strong",{parentName:"p"},"Pull From Repository")," button. This command updates Bob\xb4s ",(0,n.kt)("strong",{parentName:"p"},"Branches")," pane and he can now see Alice's branch with her changes to the documentation. "),(0,n.kt)("img",{src:"/img/pull-from-repository.png",width:"450",alt:"Pull from repository",style:{margin:"30px 0"}}),(0,n.kt)("p",null,"The technical documentation is comprehensive, so to make sure he knows what has been changed Bob right-clicks the feature branch and selects ",(0,n.kt)("strong",{parentName:"p"},"Compare with 'master"),". "),(0,n.kt)("img",{src:"/img/compare-with-master-menu-item.png",width:"450",alt:"Pull from repository",style:{margin:"30px 0"}}),(0,n.kt)("p",null,"A new pane is opened, and Bob can now easily see all the changes that Alice has made. When selecting a changed file, Bob gets a side-by-side comparison of the file in the two branches. As some of the requirements are new, the ",(0,n.kt)("strong",{parentName:"p"},"master branch")," side is empty. "),(0,n.kt)("img",{src:"/img/compare-with-master-window.png",width:"100%",alt:"Pull from repository",style:{margin:"30px 0"}}),(0,n.kt)("h3",{id:"resolve-feedback"},"Resolve feedback"),(0,n.kt)("p",null,"Bob decides he wants to make a few changes himself before integrating it into the official project, and he and Alice have some back-and-forth via email. Both Alice and Bob can use the exact same process as Alice, when she did the first iteration of her feature branch. Any commit Bob adds also show up in Alice's reposity when she selects the ",(0,n.kt)("strong",{parentName:"p"},"Pull From Repository")," button in the ",(0,n.kt)("strong",{parentName:"p"},"Branches")," pane."),(0,n.kt)("h3",{id:"merge-to-master-branch"},"Merge to master branch"),(0,n.kt)("p",null,"Once Bob is ready to accept the pull request, someone needs to merge the feature into the stable project (this can be done by either Bob or Alice). First Bob needs to checkout the master branch:"),(0,n.kt)("img",{src:"/img/checkout-master.png",width:"450",alt:"Pull from repository",style:{margin:"30px 0"}}),(0,n.kt)("p",null,"He then right-clicks the feature branch and selects ",(0,n.kt)("strong",{parentName:"p"},"Merge into 'master'"),". This merges the feature branch into 'master' in his local project and in the remote repository. When the command has completed he receives a confirmation dialog."),(0,n.kt)("img",{src:"/img/merge-into-master.png",width:"450",alt:"Pull from repository",style:{margin:"30px 0"}}),(0,n.kt)("p",null,"When selecting the ",(0,n.kt)("strong",{parentName:"p"},"Show Merged Branches")," button, Bob can see that the feature branch has been added to the list of merged branches."),(0,n.kt)("img",{src:"/img/show-merged-branches.png",width:"450",alt:"Show merged branches",style:{margin:"30px 0"}}),(0,n.kt)("p",null,"To check the status of the 'master' branch, Bob selects ",(0,n.kt)("strong",{parentName:"p"},"Repository > View Branch History")," in the menu. A pane with the history of the master branch shows that all the changes up to the last commit in the feature branch has been merged into the master branch."),(0,n.kt)("img",{src:"/img/history-master.png",width:"100%",alt:"Pull from repository",style:{margin:"30px 0"}}),(0,n.kt)("p",null,"While Alice and Bob are working on Alice's-feature and discussing it in a email thread, Charlie is doing the exact same thing with his own feature branch. By isolating document changes into separate branches, everybody can work independently, yet it\u2019s still trivial to share changes with other team members when necessary."))}m.isMDXComponent=!0}}]);